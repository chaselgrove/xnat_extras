#!/usr/bin/python

# Copyright 2011 Christian Haselgrove
# Licensed under the BSD License: http://www.opensource.org/licenses/bsd-license.php

import sys
import os
import getopt
import getpass
import pyxnat

def report_error(msg):
    sys.stderr.write('%s: %s\n' % (progname, msg))
    sys.stderr.write('run %s with no arguments for usage\n' % progname)
    return

def debug(msg):
    if debug_flag:
        print msg
    return

def print_table(rows, indent=''):
    if len(rows) == 0:
        return
    n_cols = len(rows[0])
    widths = []
    for i in xrange(n_cols):
        widths.append(max([ len(el[i]) for el in rows ]))
    for row in rows:
        parts = [ row[i].ljust(widths[i]) for i in xrange(n_cols) ]
        print indent + '  '.join(parts)
    return

def get_projects():
    """get all projects"""
    return [ p for p in interface.select.projects() ]

def get_project(id):
    """get a project given a case-insensitive ID"""
    for p in get_projects():
        if id.lower() == p.id().lower():
            return p
    raise KeyError, id

progname = os.path.basename(sys.argv[0])

try:
    host = os.environ['XNAT_URI']
except KeyError:
    host = None

try:
    user_name = os.environ['XNAT_USER']
except KeyError:
    user_name = None

try:
    password = os.environ['XNAT_PASSWORD']
except KeyError:
    password = None

if len(sys.argv) == 1:
    print
    print 'usage: %s [options] <command> [command arguments]' % progname
    print
    print 'call an XNAT REST service'
    print
    print 'options are:'
    print
    print '    -d -- debug'
    print '    -n -- no authentication'
    print '    -h <host>'
    print '    -u <user name>'
    print '    -p <password>'
    print
    print 'option values may be given by environment variables:'
    print
    if host is None:
        print '    host: XNAT_URI'
    else:
        print '    host: XNAT_URI (set to %s)' % host
    if user_name is None:
        print '    user name: XNAT_USER'
    else:
        print '    user name: XNAT_USER (set to %s)' % user_name
    if password is None:
        print '    password: XNAT_PASSWORD'
    else:
        print '    password: XNAT_PASSWORD (currently set)'
    print
    print '%s will prompt for a missing user name, password, or host' % progname
    print
    print 'commands are:'
    print
    print '    xml <type> <ID>'
    print '    projects'
    print '    subjects <project>'
    print '    experiments <project> <subject>'
    print
    sys.exit(1)

try:
    (opts, args) = getopt.getopt(sys.argv[1:], 'h:u:p:dn')
except getopt.error, data:
    report_error(data)
    sys.exit(1)

if len(args) < 1:
    report_error('no command given')
    sys.exit(1)

debug_flag = False
auth_flag = True

for (option, value) in opts:
    if option == '-h':
        host = value
    if option == '-u':
        user_name = value
    if option == '-p':
        password = value
    if option == '-d':
        debug_flag = True
    if option == '-n':
        auth_flag = False

if host is None:
    sys.stdout.write('Host: ')
    sys.stdout.flush()
    host = sys.stdin.readline().strip()

if auth_flag:
    if user_name is None:
        sys.stdout.write('User name: ')
        sys.stdout.flush()
        user_name = sys.stdin.readline().strip()
    if password is None:
        password = getpass.getpass()

host = host.rstrip('/')

command = args.pop(0)

if auth_flag:
    interface = pyxnat.Interface(server=host, 
                                 user=user_name, 
                                 password=password)
else:
    interface = pyxnat.Interface(server=host, anonymous=True)

if command == 'xml':
    if len(args) != 2:
        report_error('wrong number of arguments to "xml"')
        sys.exit(1)
    (type, id) = args
    if type == 'project':
        projects = [ p for p in interface.select.projects(id) ]
        if len(projects) == 0:
            sys.stderr.write('%s: project "%s" not found\n' % (progname, id))
            sys.exit(1)
        print projects[0].get()
    elif type == 'subject':
        subjects = [ s for s in interface.select.projects().subjects() ]
        if len(subjects) == 0:
            sys.stderr.write('%s: subject "%s" not found\n' % (progname, id))
            sys.exit(1)
        print subjects[0].get()
    else:
        report_error('bad type "%s"' % type)
        sys.exit(1)
elif command == 'projects':
    info = []
    for p in interface.select.projects():
        info.append(p.attrs.mget(('ID', 'secondary_ID', 'name')))
    print_table(info)
elif command == 'subjects':
    if len(args) != 1:
        report_error('missing argument to "subjects"')
        sys.exit(1)
    info = []
    for s in interface.select.project(args[0]).subjects():
        info.append(s.attrs.mget(('ID', 'label')))
    print_table(info)
elif command == 'experiments':
    if len(args) != 2:
        report_error('missing argument(s) to "experiments"')
        sys.exit(1)
    info = []
    for e in interface.select.projects(args[0]).subjects(args[1]).experiments():
        info.append((e.id(), e.label()))
    print_table(info)
else:
    report_error('unknown command \"%s\"\n' % command)
    sys.exit(1)

sys.exit(0)

# eof
