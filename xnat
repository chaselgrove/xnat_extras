#!/usr/bin/python

# Copyright 2011 Christian Haselgrove
# Licensed under the BSD License: http://www.opensource.org/licenses/bsd-license.php

import sys
import os
import getopt
import getpass
import pyxnat

def report_error(msg):
	sys.stderr.write('%s: %s\n' % (progname, msg))
	sys.stderr.write('run %s with no arguments for usage\n' % progname)
	return

def debug(msg):
	if debug_flag:
		print msg
	return

def print_table(rows, indent=''):
	if len(rows) == 0:
		return
	n_cols = len(rows[0])
	widths = []
	for i in xrange(n_cols):
		widths.append(max([ len(el[i]) for el in rows ]))
	for row in rows:
		parts = [ row[i].ljust(widths[i]) for i in xrange(n_cols) ]
		print indent + '  '.join(parts)
	return

def get_projects():
	"""get all projects"""
	return [ p for p in interface.select.projects() ]

def get_project(id):
	"""get a project given a case-insensitive ID"""
	for p in get_projects():
		if id.lower() == p.id().lower():
			return p
	raise KeyError, id

progname = os.path.basename(sys.argv[0])

try:
	host = os.environ['XNAT_HOST']
except KeyError:
	host = None

try:
	user_name = os.environ['XNAT_USER']
except KeyError:
	user_name = None

try:
	password = os.environ['XNAT_PASSWORD']
except KeyError:
	password = None

if len(sys.argv) == 1:
	print
	print 'usage: %s [options] <command> [command arguments]' % progname
	print
	print 'call an XNAT REST service'
	print
	print 'options are:'
	print
	print '    -d -- debug'
	print '    -h <host>'
	print '    -u <user name>'
	print '    -p <password>'
	print
	print 'option values may be given by environment variables:'
	print
	if host is None:
		print '    host: XNAT_HOST'
	else:
		print '    host: XNAT_HOST (set to %s)' % host
	if user_name is None:
		print '    user name: XNAT_USER'
	else:
		print '    user name: XNAT_USER (set to %s)' % user_name
	if password is None:
		print '    password: XNAT_PASSWORD'
	else:
		print '    password: XNAT_PASSWORD (currently set)'
	print
	print '%s will prompt for a missing user name, password, or host' % progname
	print
	print 'commands are:'
	print
	print '    xml <type> <ID>'
	print '    projects'
	print '    subjects [project]'
	print '    experiments [project|subject]'
	print
	sys.exit(1)

try:
	(opts, args) = getopt.getopt(sys.argv[1:], 'h:u:p:d')
except getopt.error, data:
	report_error(data)
	sys.exit(1)

if len(args) < 1:
	report_error('no command given')
	sys.exit(1)

debug_flag = False

for (option, value) in opts:
	if option == '-h':
		host = value
	if option == '-u':
		user_name = value
	if option == '-p':
		password = value
	if option == '-d':
		debug_flag = True

if host is None:
	sys.stdout.write('Host: ')
	sys.stdout.flush()
	host = sys.stdin.readline().strip()

if user_name is None:
	sys.stdout.write('User name: ')
	sys.stdout.flush()
	user_name = sys.stdin.readline().strip()

if password is None:
	password = getpass.getpass()

host = host.rstrip('/')

command = args.pop(0)

interface = pyxnat.Interface(server=host, 
                             user=user_name, 
                             password=password)

if command == 'xml':
	if len(args) != 2:
		report_error('wrong number of arguments to "xml"')
		sys.exit(1)
	(type, id) = args
	if type == 'project':
		projects = [ p for p in interface.select.projects(id) ]
		if len(projects) == 0:
			sys.stderr.write('%s: project "%s" not found\n' % (progname, id))
			sys.exit(1)
		print projects[0].get()
	elif type == 'subject':
		subjects = [ s for s in interface.select.projects().subjects() ]
		if len(subjects) == 0:
			sys.stderr.write('%s: subject "%s" not found\n' % (progname, id))
			sys.exit(1)
		print subjects[0].get()
	else:
		report_error('bad type "%s"' % type)
		sys.exit(1)
elif command == 'projects':
	info = []
	for p in interface.select.projects():
		info.append(p.attrs.mget(('ID', 'secondary_ID', 'name')))
	print_table(info)
elif command == 'subjects':
	if len(args) == 0:
		projects = interface.select.projects().get()
	else:
		projects = [args[0]]
	for p in projects:
		print interface.select.projects(p).get()
		print p
		info = []
		for s in interface.select.project(p).subjects():
			info.append(s.attrs.mget(('ID', 'label')))
		print_table(info, indent='    ')
elif command == 'experiments':
	"""

def get_experiements(interface, args):
	if args:
		for s in interface.select('//subjects'):
			if s.id() == args[0]:
				return subject
		for p in interface.select.projects():
			if p.id() == args[0]:
				return project
		return None
	return [interface.select.projects().get()]

	get_experiements(interface, args)
	if len(args) == 0:
		projects = [interface.select.projects().get()]
	else:
		subject = None
		if subject is None:
"""

#if project is None:
#msg = '%s: no project or subject "%s"\n' % (progname, argv[0])
#sys.stderr.write(msg)
#sys.exit(1)

else:
	report_error('unknown command \"%s\"\n' % command)
	sys.exit(1)

sys.exit(0)

# eof
