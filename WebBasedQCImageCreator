#!/usr/bin/python

import sys
import os
import xnat

def command_line_error(msg):
    sys.stderr.write('%s: %s\n' % (progname, msg))
    sys.stderr.write('run %s with no arguments for usage\n' % progname)
    return

progname = os.path.basename(sys.argv.pop(0))

if not sys.argv:
    print
    print 'usage: %s <options>' % progname
    print
    print 'options are:'
    print
    print '    -session <MR-session label> (ignored)'
    print '    -project <project that the MR-session belongs to> (ignored)'
    print '    -xnatId <MR-session ID>'
    print '    -host <XNAT base URI>'
    print '    -u <XNAT username>'
    print '    -pwd <XNAT password>'
    print '    -raw <create QC files for raw scans only>'
    print
    sys.exit(1)

session_id = None
base_uri = None
username = None
password = None
raw_flag = False

while sys.argv:
    option = sys.argv.pop(0)
    try:
        if option == '-session':
            sys.argv.pop(0)
        elif option == '-xnatId':
            session_id = sys.argv.pop(0)
        elif option == '-project':
            sys.argv.pop(0)
        elif option == '-host':
            base_uri = sys.argv.pop(0)
        elif option == '-u':
            username = sys.argv.pop(0)
        elif option == '-pwd':
            password = sys.argv.pop(0)
        elif option == '-raw':
            raw_flag = True
        else:
            command_line_error('unknown option "%s"' % option)
            sys.exit(1)
    except IndexError:
        command_line_error('missing argument to %s' % option)
        sys.exit(1)

if not session_id:
    command_line_error('no session label or session ID given')
    sys.exit(1)

if not base_uri:
    command_line_error('no XNAT URI given')
    sys.exit(1)

if not username:
    command_line_error('no username given')
    sys.exit(1)

if not password:
    command_line_error('no password given')
    sys.exit(1)

connection = xnat.Connection(base_uri, username, password)

e = connection.find_experiment(session_id)
for scan in e.scans:
    print scan

connection.close()

sys.exit(0)

# eof
