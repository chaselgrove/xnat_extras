#!/usr/bin/python

import sys
import os
import traceback
import shutil
import tempfile
import StringIO
import PIL.Image
import dicom
import xnat

def command_line_error(msg):
    sys.stderr.write('%s: %s\n' % (progname, msg))
    sys.stderr.write('run %s with no arguments for usage\n' % progname)
    return

def put_image(im, resource, fname, content):
    if fname in resource.files:
        resource.files[fname].delete()
    buf = StringIO.StringIO()
    im.save(buf, format='GIF')
    resource.create_file(buf.getvalue(), fname, format='GIF', content=content)
    buf.close()
    return

def create_snapshots(scan, session_id):
    if 'DICOM' in scan.resources:
        im = create_from_dicom(scan)
    if 'secondary' in scan.resources:
        im = create_from_secondary(scan)
    else:
        raise ValueError('no handlers found')
    try:
        resource = scan.resources['SNAPSHOTS']
    except KeyError:
        resource = scan.create_resource('SNAPSHOTS')
    fname = '%s_%s_qc.gif' % (session_id, scan.id)
    put_image(im, resource, fname, 'ORIGINAL')
    fname = '%s_%s_qc_t.gif' % (session_id, scan.id)
    half_size = [ s/2 for s in im.size ]
    put_image(im.resize(half_size), resource, fname, 'THUMBNAIL')
    return

def create_from_dicom(scan):
    tempdir = tempfile.mkdtemp()
    try:
        im = PIL.Image.open('test.png')
    finally:
        shutil.rmtree(tempdir)
    return im

def create_from_secondary(scan):
    tempdir = tempfile.mkdtemp()
    try:
        raise NotImplementedError
    finally:
        shutil.rmtree(tempdir)
    return im

progname = os.path.basename(sys.argv.pop(0))

if not sys.argv:
    print
    print 'usage: %s <options>' % progname
    print
    print 'original options are:'
    print
    print '    -session <MR-session label> (ignored)'
    print '    -project <project that the MR-session belongs to> (ignored)'
    print '    -xnatId <MR-session ID>'
    print '    -host <XNAT base URI>'
    print '    -u <XNAT username>'
    print '    -pwd <XNAT password>'
    print '    -raw <create QC files for raw scans only> (ignored)'
    print
    print 'new options are:'
    print
    print '    -scan <comma-separated list of scans> (may occur more than once)'
    print '    -nooverwrite'
    print
    sys.exit(1)

session_id = None
base_uri = None
username = None
password = None
overwrite_flag = True
scans = None

while sys.argv:
    option = sys.argv.pop(0)
    try:
        if option == '-session':
            sys.argv.pop(0)
        elif option == '-xnatId':
            session_id = sys.argv.pop(0)
        elif option == '-project':
            sys.argv.pop(0)
        elif option == '-host':
            base_uri = sys.argv.pop(0)
        elif option == '-u':
            username = sys.argv.pop(0)
        elif option == '-pwd':
            password = sys.argv.pop(0)
        elif option == '-raw':
            pass
        elif option == '-nooverwrite':
            overwrite_flag = False
        elif option == '-scan':
            if scans is None:
                scans = set()
            scans.update(sys.argv.pop(0).split(','))
        else:
            command_line_error('unknown option "%s"' % option)
            sys.exit(1)
    except IndexError:
        command_line_error('missing argument to %s' % option)
        sys.exit(1)

if not session_id:
    command_line_error('no session label or session ID given')
    sys.exit(1)

if not base_uri:
    command_line_error('no XNAT URI given')
    sys.exit(1)

if not username:
    command_line_error('no username given')
    sys.exit(1)

if not password:
    command_line_error('no password given')
    sys.exit(1)

connection = xnat.Connection(base_uri, username, password)

e = connection.find_experiment(session_id)
for scan in e.scans.itervalues():
    if scans is not None:
        if scan.id not in scans:
            print 'skipping', scan
            continue
        scans.remove(scan.id)
    if not overwrite_flag:
        if 'SNAPSHOTS' in scan.resources:
            print 'SNAPSHOTS exists', scan
            continue
    print 'doing', scan
    try:
        create_snapshots(scan, session_id)
    except:
        print 'error', scan
        traceback.print_exc()

if scans is not None:
    print 'remaining', scans

connection.close()

sys.exit(0)

# eof
